#pragma once

class KeyboardManager;
class Command;

enum Action;

struct PlayerStateRewindData;
struct EnemyStateRewindData;


// [Credit] https://gameprogrammingpatterns.com/state.html
// Insiration for all state-based behavior here, in PlayerState, and in the various PlayerState-inheriting classes.
class ActorState : public State
{
public:
	virtual ~ActorState() { }


	// Update hitbox sizes and functionality.
	virtual void SetHitboxData() = 0;


	// HandleInput takes either keyboard input from the player or an action generated by a prior method (enemy logic, etc).
	virtual ActorState* HandleInput(const KeyboardManager&, Command*&) { return nullptr;  }
	virtual ActorState* HandleInput(const Action&, Command*&) { return nullptr; }

	
	// Manage rewind data.
	virtual void StoreRewindData(PlayerStateRewindData*) {}
	virtual void StoreRewindData(EnemyStateRewindData*) {}


	// Stores int id of state for rewind data retrieval.
	const int GetStateIndex() const;


	int stateIndex_{ 0 };


	// Name for debug purposes.
	const char* name_{ "base" };
};