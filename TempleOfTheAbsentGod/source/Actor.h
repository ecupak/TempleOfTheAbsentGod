#pragma once

class KeyboardManager;
class Command;
class ActorState;

struct MapTile;
struct ActorRewindData;


// [Credit] https://gameprogrammingpatterns.com/state.html
// All state-based behavior here, in State, and in the various State-inheriting classes.
class Actor : public GameObject
{
public:
	Actor(const ObjectClass objectClass, int tileLayer, int tileMask, int objectLayer, int objectMask);
	~Actor();


	// Input and update delegate tasks to the current state class.
	void FinishUpdate(float deltaTime, float gravity);


	// Collision management.
	virtual void ResolveObstacleCollisions(const float2& contactNormals) override;
	virtual void OnObjectCollision(GameObject* object) override;
	virtual void ResolveObjectCollisions() override;


	// Returns if the player overlaps the queried object. Can pass a bitflag to check multiple hitboxes at once.
	const bool AreHitboxesTouchingInteractTile(const int hitboxFlags, const int tileFlags) const;
	const bool IsHitboxTouchingInteractTile(const int hitboxIndex, const int tileFlags) const;
	const bool IsHitboxTouchingInteractTile(const int hitboxIndex, const int tileFlags, const MapTile*& mapTile) const;

	const bool AreHitboxesTouchingMapTile(const int hitboxFlags, const int tileFlags) const;
	const bool IsHitboxTouchingMapTile(const int hitboxIndex, const int tileFlags) const;


	friend class MoveCommand;
	friend class JumpCommand;
	friend class LaunchCommand;


protected:
	// Rewind data.
	void StoreRewindData(ActorRewindData* rewindData);
	void Rewind(ActorRewindData* rewindData);
	void Resume(ActorRewindData* rewindData);

	// Swap to the sprite that the state needs.
	void SetSprite(const int spriteSheetId);
	
	
	// Track direction player is facing across all states. isFlipped is true if we face to the left.
	void SetSpriteFacing(bool isFlipped);


	// Change player state. Does exit of current state and enter of new state.
	void ChangeState(ActorState* newState, const bool isFromRewind = false);


	// Player's collision masks is an aggregate of all collision masks in hitboxes.
	void GetAllTileMasks();


	// Advance any active timers and resolve any that reach 0.
	virtual void ProcessTimers(float deltaTime);


	// Apply damage.
	virtual void TakeDamage(const int amount);


	// List of objects collided with.
	GameObject* objectCollisionList_[5]{ nullptr };
	int objectCollisionCount_{ 0 };


	// Health.
	int maxHp_{ 4 };
	int currentHp_{ maxHp_ };


	// Variables affecting movement speed.
	float gravityModifier_{ 1.0f };

	float groundFriction_{ 160.0f };
	float airFriction_{ 130.0f };

	float horizontalAcceleration_{ 300.0f };
	float jumpImpulse_{ -110.0f };

	float2 velocityMax_{ 60.0f, 120.0f };


	// Used to help states know when to transition.
	bool isOnGround_{ true };
	bool isAgainstWall_{ false };


	// Sprites for each state.
	Sprite* (*spriteSheets_) { nullptr };
	int spriteSheetsCount_{ 0 };


	// Different player states as classes (and their sprites).
	ActorState* state_{ nullptr };


	// Commands are actions the actor will take during Update(). They are generated by states.
	Command* command_{ nullptr };
};